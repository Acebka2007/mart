import logging
import asyncio
import aiosqlite
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.client.session.aiohttp import AiohttpSession
from aiogram.types import LabeledPrice, PreCheckoutQuery
from dotenv import load_dotenv
import os
import openai
from PIL import Image
import pytesseract

# ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN", "")  # –¢–æ–∫–µ–Ω –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞

if not TELEGRAM_TOKEN or not OPENAI_API_KEY:
    raise ValueError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç TELEGRAM_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ .env.")

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_TOKEN, session=AiohttpSession())
dp = Dispatcher()

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai.api_key = OPENAI_API_KEY

# ‚úÖ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with aiosqlite.connect("subscriptions.db") as db:
        await db.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            start_date TEXT,
            end_date TEXT
        )
        ''')
        await db.commit()

async def has_active_subscription(user_id: int) -> bool:
    async with aiosqlite.connect("subscriptions.db") as db:
        async with db.execute("SELECT end_date FROM users WHERE user_id = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                end_date = datetime.strptime(row[0], "%Y-%m-%d")
                return end_date >= datetime.now()
    return False

async def activate_trial(user_id: int) -> None:
    start_date = datetime.now()
    end_date = start_date + timedelta(days=3)
    async with aiosqlite.connect("subscriptions.db") as db:
        await db.execute(
            "REPLACE INTO users (user_id, start_date, end_date) VALUES (?, ?, ?)",
            (user_id, start_date.strftime("%Y-%m-%d"), end_date.strftime("%Y-%m-%d"))
        )
        await db.commit()

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å OpenAI
async def get_ai_response(prompt: str) -> str:
    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞."

# ‚úÖ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def extract_text_from_image(image_path: str) -> str:
    try:
        image = Image.open(image_path)
        text = pytesseract.image_to_string(image, lang='rus+eng')
        return text
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏."

# ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def start_command(message: types.Message):
    user_id = message.from_user.id
    if not await has_active_subscription(user_id):
        await activate_trial(user_id)
        await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à 3-–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
    else:
        await message.reply("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.")

@dp.message(Command("help"))
async def help_command(message: types.Message):
    help_text = """
    ü§ñ –Ø —Ü–∏—Ñ—Ä–æ–≤–æ–π —É—á–∏—Ç–µ–ª—å! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
    
    üìö /solve [–∑–∞–¥–∞—á–∞] - —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É
    üß† /explain [—Ç–µ–º–∞] - –æ–±—ä—è—Å–Ω–∏—Ç—å —Ç–µ–º—É
    üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º, –∏ —è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é
    
    üí≥ /subscribe - –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
    """
    await message.reply(help_text)

@dp.message(Command("solve"))
async def solve_problem(message: types.Message):
    if not await has_active_subscription(message.from_user.id):
        await message.reply("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
        return

    problem = message.text.replace("/solve", "").strip()
    if not problem:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /solve.")
        return

    solution = await get_ai_response(f"–†–µ—à–∏ —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É: {problem}")
    await message.reply(solution)

@dp.message(Command("explain"))
async def explain_topic(message: types.Message):
    if not await has_active_subscription(message.from_user.id):
        await message.reply("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
        return

    topic = message.text.replace("/explain", "").strip()
    if not topic:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /explain.")
        return

    explanation = await get_ai_response(f"–û–±—ä—è—Å–Ω–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ —Ç–µ–º—É: {topic}")
    await message.reply(explanation)

@dp.message(content_types=['photo'])
async def handle_photo(message: types.Message):
    if not await has_active_subscription(message.from_user.id):
        await message.reply("–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
        return

    file_id = message.photo[-1].file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    await bot.download_file(file_path, "temp_image.jpg")
    
    text = await extract_text_from_image("temp_image.jpg")
    os.remove("temp_image.jpg")
    
    if text:
        await message.reply(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{text}")
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏.")

# ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π (–ø—Ä–∏–º–µ—Ä)
@dp.message(Command("subscribe"))
async def subscribe(message: types.Message):
    if await has_active_subscription(message.from_user.id):
        await message.reply("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.")
        return

    await bot.send_invoice(
        message.chat.id,
        title="–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ü–∏—Ñ—Ä–æ–≤–æ–≥–æ —É—á–∏—Ç–µ–ª—è",
        description="–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞",
        provider_token=PROVIDER_TOKEN,
        currency="RUB",
        prices=[LabeledPrice(label="–ü–æ–¥–ø–∏—Å–∫–∞", amount=50000)],  # 500 —Ä—É–±–ª–µ–π
        start_parameter="subscribe",
        payload="monthly_subscription"
    )

@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@dp.message(content_types=['successful_payment'])
async def process_successful_payment(message: types.Message):
    user_id = message.from_user.id
    start_date = datetime.now()
    end_date = start_date + timedelta(days=30)
    async with aiosqlite.connect("subscriptions.db") as db:
        await db.execute(
            "REPLACE INTO users (user_id, start_date, end_date) VALUES (?, ?, ?)",
            (user_id, start_date.strftime("%Y-%m-%d"), end_date.strftime("%Y-%m-%d"))
        )
        await db.commit()
    await message.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π.")

# ‚úÖ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await init_db()
    logging.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
